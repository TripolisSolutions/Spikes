require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UserFollowersController do

  # This should return the minimal set of attributes required to create a valid
  # UserFollower. As you add validations to UserFollower, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "user_id" => "1" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserFollowersController. Be sure to keep this updated too.
  def valid_session
    {}
  end


  context "user logged in" do
    before do
      @controller.stub(:logged_in?).and_return(true)
      @controller.stub(:current_user_id).and_return(1)
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new UserFollower" do
          expect {
            post :create, {:user_follower => valid_attributes}, valid_session
          }.to change(UserFollower, :count).by(1)
        end

        it "assigns a newly created user_follower as @user_follower" do
          post :create, {:user_follower => valid_attributes}, valid_session
          assigns(:user_follower).should be_a(UserFollower)
          assigns(:user_follower).should be_persisted
        end

        it "redirects to the created user_follower" do
          post :create, {:user_follower => valid_attributes}, valid_session
          response.should redirect_to(root_path)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved user_follower as @user_follower" do
          # Trigger the behavior that occurs when invalid params are submitted
          UserFollower.any_instance.stub(:save).and_return(false)
          post :create, {:user_follower => { "user_id" => "invalid value" }}, valid_session
          assigns(:user_follower).should be_a_new(UserFollower)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          UserFollower.any_instance.stub(:save).and_return(false)
          post :create, {:user_follower => { "user_id" => "invalid value" }}, valid_session
          response.should render_template("new")
        end
      end
    end


    describe "DELETE destroy" do
      it "destroys the requested user_follower" do
        user_follower = UserFollower.create! valid_attributes
        expect {
          delete :destroy, {:id => user_follower.to_param}, valid_session
        }.to change(UserFollower, :count).by(-1)
      end

      it "redirects to the user_followers list" do
        user_follower = UserFollower.create! valid_attributes
        delete :destroy, {:id => user_follower.to_param}, valid_session
        response.should redirect_to(root_url)
      end
    end
  end
end
